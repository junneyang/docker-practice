1、安装之前
uname -a
Linux ubuntu 3.13.0-32-generic #57~precise1-Ubuntu SMP Tue Jul 15 03:51:20 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
cat /etc/issue
Ubuntu 12.04.5 LTS \n \l

2、更新内核
sudo apt-get update
sudo apt-get install linux-image-generic-lts-raring linux-headers-generic-lts-raring
sudo reboot

3、更新内核之后
uname -a
Linux ubuntu 3.13.0-32-generic #57~precise1-Ubuntu SMP Tue Jul 15 03:51:20 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
cat /etc/issue
Ubuntu 12.04.5 LTS \n \l

4、安装步骤
sudo apt-get install apt-transport-https
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
sudo bash -c "echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list"
sudo apt-get update
sudo apt-get install lxc-docker
sudo service docker start
安装完毕查看默认生成的网络信息
sudo apt-get install bridge-utils
brctl show


5、下载镜像
docker images
docker search ubuntu
registry.hub.docker.com
sudo docker pull ubuntu:12.04
sudo docker pull registry.hub.docker.com/ubuntu:12.04
或者指定其他仓库：sudo docker pull dl.dockerpool.com:5000/ubuntu:12.04
docker images

6、使用该镜像创建容器运行bash应用
docker ps
docker ps -a
docker ps -a -q
docker run -i -t ubuntu:12.04 /bin/bash
ip link
ip addr
ip addr show
ip route

7、修改已有的镜像（比较繁琐复杂）
镜像：Docker 镜像是怎么实现增量的修改和维护的？ 每个镜像都由很多层次构成，Docker 使用 Union FS 将这些不同的层结合到一个镜像中去。
通常 Union FS 有两个用途, 一方面可以实现不借助 LVM、RAID 将多个 disk 挂到同一个目录下,另一个更常用的就是将一个只读的分支和一个可写的分支联合在一起，
Live CD 正是基于此方法可以允许在镜像不变的基础上允许用户在其上进行一些写操作。 Docker 在 AUFS 上构建的容器也是利用了类似的原理。

apt-get install memcached -y
exit
docker commit -m "ubuntu12.04-memcached" -a "JunneYang" b7c013c79b7c ubuntu12.04:memcached
docker images
docker run -i -t ubuntu12.04:memcached /bin/bash
可以使用memcached命令了

8、使用Dockerfile创建镜像（推荐方式）
vi Dockerfile
# This is a comment
FROM ubuntu:12.04
MAINTAINER JunneYang <597092663@qq.com>
RUN apt-get install -qq memcached -y

docker build -t="ubuntu:memcached" .
docker images
docker run -i -t ubuntu:memcached /bin/bash

9、Dockerfile进一步
vi Dockerfile
# This is a comment
FROM ubuntu:12.04
MAINTAINER JunneYang <597092663@qq.com>

# Update the default application repository sources list
RUN apt-get update

# Install Memcached
RUN apt-get install memcached -y

# put my local HelloWorld.py to ~
ADD HelloWorld.py /

# Port to expose (default: 11211)
EXPOSE 11211

# Default Memcached run command arguments
CMD ["-m", "64"]

# Set the user to run Memcached root
#USER daemon

# Set the entrypoint to memcached binary
ENTRYPOINT ["memcached", "-u", "root"]


docker build -t="ubuntu:memcached" .
docker images
docker run --name=memcached -d -p 45001:11211 ubuntu:memcached
docker run --name=memcached -m 128m -d -p 45001:11211 ubuntu:memcached
sudo docker inspect memcached | grep Memory
sudo docker inspect memcached

docker inspect a0b4d7b5110e
查看docker容器详情
docker port a0b4d7b5110e
docker rm -f $(docker ps -a -q)
docker logs -f $(docker ps -a -q)
docker rmi -f <image id/name>
docker exec -it 283124b89229  bash

RUN 命令：在上面FROM 指定的镜像里执行任何命令
格式：RUN <command> (这个命令运行一个shell中 - '/bin/sh -c')
或：RUN ["executable", "param1", "param2"]
RUN 命令等价于：docker run image_name command

CMD  and  ENTRYPOINT
命令设置在容器启动时执行命令
ENTRYPOINT，表示镜像在初始化时需要执行的命令，不可被重写覆盖，需谨记
CMD，表示镜像运行默认参数，可被重写覆盖
ENTRYPOINT/CMD都只能在文件中存在一次，并且最后一个生效(多个存在，只有最后一个生效，其它无效！)
需要初始化运行多个命令，彼此之间可以使用 && 隔开，但最后一个须要为无限运行的命令，需切记！
ENTRYPOINT/CMD，一般两者可以配合使用，比如：
ENTRYPOINT ["/usr/sbin/sshd"]
CMD ["-D"]

CMD ENTRYPOINT不同：
http://segmentfault.com/q/1010000000417103
Dockerfile文章：
http://my.oschina.net/mfk123/blog/292417
http://segmentfault.com/a/1190000002711357
http://www.cnblogs.com/elnino/p/3899136.html
为什么不需要在Docker容器中运行sshd：
http://www.linuxeden.com/html/news/20140924/155749.html
Docker Explained: How To Create Docker Containers Running Memcached：
https://www.digitalocean.com/community/tutorials/docker-explained-how-to-create-docker-containers-running-memcached

镜像导入：sudo cat ubuntu-14.04-x86_64-minimal.tar.gz  |docker import - ubuntu:14.04
上传镜像：sudo docker push ouruser/sinatra
保存镜像：docker save -o ubuntu_12.04_memcached.tar.gz ubuntu:memcached
载入镜像：sudo docker load --input ubuntu_14.04.tar

10、Docker容器原理
当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：

检查本地是否存在指定的镜像，不存在就从公有仓库下载
利用镜像创建并启动一个容器
分配一个文件系统，并在只读的镜像层外面挂载一层可读写层
从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去
从地址池配置一个 ip 地址给容器
执行用户指定的应用程序
执行完毕后容器被终止

docker stop 47a07e01a30d
docker start 47a07e01a30d
docker logs -f 47a07e01a30d

进入容器
Docker exec与Docker attach：http://m.blog.csdn.net/blog/halcyonbaby/46884605
http://blog.csdn.net/halcyonbaby/article/details/46884605
使用 OpenVPN 互联多地机房及Dokcer跨主机/机房通讯：http://lsproc.com/tag/docker
Docker 常见问题 (FAQ)：http://lsproc.com/tag/faq#toc_12
Docker终极指南(理解比较深入)： http://dockone.io/article/133
大家觉得现在的微服务架构最需要什么？ ：http://dockone.io/question/426
Docker远程python API操作容器一例：http://blog.liuts.com/post/241/
Docker学习笔记之二，基于Dockerfile搭建JAVA Tomcat运行环境：http://www.blogjava.net/yongboy/archive/2013/12/16/407643.html
导入导出容器快照、容器删除


11、docker镜像
sudo docker run --restart always -d -p 5000:5000 registry
docker images
sudo docker tag c838cf173453 http://10.20.0.88:5000/test
docker rmi 'http://10.20.0.88:5000/test'
sudo docker push 10.20.0.88:5000/test
使用Docker registry镜像创建私有仓库 ：http://blog.csdn.net/delphiwcdj/article/details/43099877
docker 私有方仓库下载镜像 报错：http://www.zhihu.com/question/26718775/answer/35291256

docker login -u junneyang -p Admin@123 -e 597092663@qq.com https://registry.hub.docker.com

12、数据卷
docker run --name=memcached -d -p 45001:11211 -v /root/docker/memcached:/root:ro ubuntu:memcached
ls /root/
Dockerfile  HelloWorld.py  test.py  test.txt  ubuntu_12.04_memcached.tar.gz
上面的命令加载主机的 /root/docker/memcached 目录到容器的 /root 目录。并且指定只读权限。
这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。
本地目录的路径必须是绝对路径，如果目录不存在 Docker 会自动为你创建它。
Docker 挂载数据卷的默认权限是读写，用户也可以通过 :ro 指定为只读。

13、数据卷容器
数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的。
docker run --name=data -d -v /root/docker/data ubuntu:12.04
docker run -d -p 45001:11211 --volumes-from data --name data-1 ubuntu:memcached
docker run -d -p 45002:11211 --volumes-from data --name data-2 ubuntu:memcached
使用 --volumes-from 参数所挂载数据卷的容器自己并不需要保持在运行状态。
如果删除了挂载的容器（包括 dbdata、db1 和 db2），数据卷并不会被自动删除。
如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 docker rm -v 命令来指定同时删除关联的容器。 
这可以让用户在容器之间升级和移动数据卷。

14、利用数据卷容器备份、恢复、迁移
docker run --volumes-from data -v $(pwd):/backup ubuntu:12.04 tar -czvf /backup/backup.tar.gz /root/docker/data
这里我们创建并登录了一个新容器，挂载了dbdata容器中的数据卷，并把本地的一个目录挂载了/backup下，
最后再传一条tar命令来备份dbdata卷到/backup下，当命令执行完成后容器就会停止运行，
并保留dbdata的备份，在本地目录下会一个备份的文件
注：新创建的容器中要有tar命令，
得到备份数据就可以恢复或迁移数据了

15、docker网络
docker run -d -p 45001:11211 --volumes-from data --name data-1 ubuntu:memcached
docker port data-1
11211/tcp -> 0.0.0.0:45001
docker inspect data-1
查看docker容器详情

16、容器互联
docker run -d -p 45003:11211 --link data-1:data-1 --name data-3 ubuntu:memcached
docker exec -it data-3 bash
cat /etc/hosts
ip addr
apt-get install -yqq inetutils-ping
ping data-1

17、使用Supervisor 来管理进程
使用进程管理工具 supervisor 来管理容器中的多个进程。使用 Supervisor 可以更好的控制、管理、重启我们希望运行的进程。
vi Dockerfile

FROM ubuntu:12.04
MAINTAINER examples@docker.com
RUN echo "deb http://archive.ubuntu.com/ubuntu precise main universe" > /etc/apt/sources.list
RUN apt-get update
RUN apt-get upgrade -y

RUN apt-get install -y openssh-server apache2 supervisor
RUN mkdir -p /var/run/sshd
RUN mkdir -p /var/log/supervisor

COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
EXPOSE 22 80
CMD ["/usr/bin/supervisord"]

cat supervisord.conf
[supervisord]
nodaemon=true
[program:sshd]
command=/usr/sbin/sshd -D

[program:apache2]
command=/bin/bash -c "source /etc/apache2/envvars && exec /usr/sbin/apache2 -DFOREGROUND"

docker build -t ubuntu:superior .
docker run -d -p 45022:22 -p 45080:80 --name supervisor -h hostname ubuntu:superior

18、Kubernetes资料文档
http://www.csdn.net/article/2014-10-31/2822393
http://blog.liuts.com/post/247/
Kubernetes系统架构简介
http://www.infoq.com/cn/articles/Kubernetes-system-architecture-introduction?utm_campaign=infoq_content&utm_source=infoq&utm_medium=feed&utm_term=global
http://www.csdn.net/article/2014-11-28/2822850-Docker
http://www.oschina.net/p/kubernetes
http://www.d1net.com/cloud/tech/329878.html
http://mt.sohu.com/20150730/n417842155.shtml
http://blog.csdn.net/zhang__jiayu/article/details/42745507
http://blog.csdn.net/zhxue123/article/details/37815957
环境搭建齐全：http://segmentfault.com/a/1190000002620961

http://www.linuxidc.com/Linux/2014-11/109725.htm
https://linux.cn/article-4810-3.html

kubernetes集群部署
http://blog.csdn.net/qingchi0/article/details/42538549
三种网络的区别Pipework、Weave、Flannel各自的优势和区别
http://dockone.io/question/259

【官方文档】
https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/ubuntu.md
Kubernetes Deployment On Bare-metal Ubuntu Nodes：
http://kubernetes.io/v1.0/docs/getting-started-guides/ubuntu.html
http://containertutorials.com/get_started_kubernetes/index.html
Installing Kubernetes Cluster with 3 minions on CentOS 7 to manage pods and services（进程逻辑结构图）：
http://www.severalnines.com/blog/installing-kubernetes-cluster-minions-centos7-manage-pods-services
深入浅出Docker（六）：像谷歌一样部署你的应用
http://www.infoq.com/cn/articles/deploy-your-application-like-google
在ubuntu上部署Kubernetes管理docker集群示例
http://segmentfault.com/a/1190000002620961
跟我一起学Kubernetes :http://blog.csdn.net/zhxue123/article/details/37815957
Kubernetes初探：原理及实践应用：http://www.csdn.net/article/2014-10-31/2822393
Kubernetes应用部署模型解析（部署篇）——必读文档：
http://www.csdn.net/article/2015-06-12/2824937

http://containertutorials.com/index.html
https://github.com/kubernetes/kubernetes/wiki/User-FAQ

k8s使用Docker HUB镜像：
docker pull docker.io/kubernetes/pause
docker tag -f docker.io/kubernetes/pause gcr.io/google_containers/pause:0.8.0
kubectl_exec.md执行命令：
https://github.com/GoogleCloudPlatform/kubernetes/blob/release-1.0/docs/user-guide/kubectl/kubectl_exec.md
How do I run private docker images on Google Container Engine：
http://stackoverflow.com/questions/26788485/how-do-i-run-private-docker-images-on-google-container-engine/26788669#26788669
Kubernetes入门（三） - 网络：
http://www.tuicool.com/articles/NRRzUbn

kubectl get nodes
kubectl get pods
kubectl get services
kubectl get replicationControllers
kubectl get events
-o json
kubectl describe pod nginx-controller-a1t4w
kubectl get rc,svc,po --all-namespaces

curl -s -L http://10.20.0.88:8080/api
curl -s -L http://10.20.0.88:8080/api/v1/pods
curl -s -L http://10.20.0.88:8080/api/v1/services
curl -s -L http://10.20.0.88:8080/api/v1/replicationcontrollers

ubuntu安装：https://github.com/kubernetes/kubernetes/blob/release-1.0/docs/getting-started-guides/ubuntu.md
刘天斯：http://blog.liuts.com/category/42/1/1/
pod、replicationControllers、services使用：http://www.csdn.net/article/2015-06-12/2824937
Kubernetes 设计概要(非完整版)：http://my.oschina.net/kakablue/blog/278038
kubernetes/cluster/addons/dns：https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/dns
Scaling Docker with Kubernetes：http://www.infoq.com/articles/scaling-docker-with-kubernetes
kubernetes几步走学习：https://github.com/kubernetes/kubernetes/tree/master/examples/guestbook
Kubernetes系统架构简介 ：http://www.infoq.com/cn/articles/Kubernetes-system-architecture-introduction?utm_campaign=infoq_content&utm_source=infoq&utm_medium=feed&utm_term=global
http://www.tuicool.com/articles/uiYjmi
Kubernetes初探：原理及实践应用：http://www.csdn.net/article/2014-10-31/2822393
Kubernetes 设计概要：http://www.oschina.net/translate/kubernetes-design-overview?cmp
Kubernetes应用部署模型解析（部署篇）：http://www.csdn.net/article/2015-06-12/2824937
关于集群中，boot_ip和service_ip的区别 ：http://blog.itpub.net/723887/viewspace-474914/


docker save -o  redis.tar.gz redis  latest
docker save -o exechealthz.tar.gz gcr.io/google_containers/exechealthz  1.0
docker save -o  kube2sky.tar.gz gcr.io/google_containers/kube2sky   1.11
docker save -o  kube2sky.1.10.tar.gz 702e6bb34d01   1.10
docker save -o etcd.tar.gz gcr.io/google_containers/etcd    2.0.9
docker save -o skydns.tar.gz gcr.io/google_containers/skydns   2015-03-11-001
docker save -o pause.tar.gz gcr.io/google_containers/pause  0.8.0
docker save -o kube-ui.tar.gz gcr.io/google_containers/kube-ui  v2
docker save -o busybox.tar.gz busybox   latest

docker save -o hyperkube.tar.gz gcr.io/google_containers/hyperkube v1.0.1
docker -H unix:///var/run/docker-bootstrap.sock save -o flannel.tar.gz quay.io/coreos/flannel 0.5.0
docker -H unix:///var/run/docker-bootstrap.sock save -o etcd.tar.gz gcr.io/google_containers/etcd 2.0.12


docker load --input busybox.tar.gz
docker load --input etcd.tar.gz
docker load --input exechealthz.tar.gz
docker load --input kube2sky.tar.gz
docker load --input kube2sky.1.10.tar.gz

docker load --input kube-ui.tar.gz
docker load --input pause.tar.gz
docker load --input redis.tar.gz
docker load --input skydns.tar.gz

docker load --input redis-slave.tar.gz

tar -xzvf etcd-v2.0.12-linux-amd64.tar.gz
tar -xzvf flannel-0.5.2-linux-amd64.tar.gz
tar -xzvf kubernetes.tar.gz

mv etcd-v2.0.12-linux-amd64.tar.gz etcd.tar.gz
mv flannel-0.5.2-linux-amd64.tar.gz flannel.tar.gz

kubectl get pods --all-namespaces
kubectl get rc --all-namespaces
kubectl get svc --all-namespaces

iptables -A OUTPUT -p udp --dport 53 -j ACCEPT
iptables -A INPUT -p udp --sport 53 -j ACCEPT
iptables -A INPUT -p udp --dport 53 -j ACCEPT
iptables -A OUTPUT -p udp --sport 53 -j ACCEPT

kubectl stop rc -l "name in (redis-master, redis-slave, frontend)"
kubectl delete service -l "name in (redis-master, redis-slave, frontend)"

K8S github：https://github.com/kubernetes/kubernetes
浙大一键安装：https://github.com/kubernetes/kubernetes/blob/release-1.0/docs/getting-started-guides/ubuntu.md
浙大完整特性示例：https://github.com/kubernetes/kubernetes/tree/release-1.0/examples/guestbook
浙大DNS验证：https://github.com/kubernetes/kubernetes/blob/v1.0.6/cluster/addons/dns/README.md
K8S基于裸金属搭建：https://github.com/kubernetes/kubernetes/blob/master/docs/getting-started-guides/docker-multinode.md
主节点：https://github.com/kubernetes/kubernetes/blob/master/docs/getting-started-guides/docker-multinode/master.md
备节点：https://github.com/kubernetes/kubernetes/blob/master/docs/getting-started-guides/docker-multinode/worker.md
测试机群：https://github.com/kubernetes/kubernetes/blob/master/docs/getting-started-guides/docker-multinode/testing.md
DNS：https://github.com/kubernetes/kubernetes/blob/master/docs/getting-started-guides/docker-multinode/deployDNS.md
DNS验证：https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/dns#how-do-i-test-if-it-is-working

docker run -t -i -d -p 8000:8000 -p 80:80 \
    -e MARATHON_ENDPOINT=http://10.20.0.88:8080,http://10.20.0.89:8080,http://10.20.0.90:8080 \
    -e BAMBOO_ENDPOINT=http://10.20.0.98:8000 \
    -e BAMBOO_ZK_HOST=10.20.0.88:2181,10.20.0.89:2181,10.20.0.90:2181 \
    -e BAMBOO_ZK_PATH=/bamboo \
    -e BIND=":8000" \
    -e CONFIG_PATH="config/production.example.json" \
    -e BAMBOO_DOCKER_AUTO_HOST=true \
    milk/bamboo:multiple-ports
hostname:CLUSTER:10.20.0.98

DNS：
curl 10.20.0.98:8123/v1/hosts/django-docker.marathon.mesos
curl 10.20.0.98:8123/v1/services/_django-docker._tcp.marathon.mesos

curl 10.20.0.98:8123/v1/hosts/mysql-mysite-product.marathon.mesos
curl 10.20.0.98:8123/v1/services/_mysql-mysite-product._tcp.marathon.mesos

dig django-docker.marathon.mesos
dig _django-docker._tcp.marathon.mesos SRV

curl -X POST http://10.20.0.88:8080/v2/apps -d @mysql.json -H "Content-type: application/json"

Docker container run error: Container exited on error: exited with status 1
DOCKER全景图：
http://container-solutions.com/continuous-delivery-with-docker-on-mesos-in-less-than-a-minute-part-2/
数人科技：
http://support.dataman-inc.com/posts/view/56308/

docker run -v /var/run/docker.sock:/var/run/docker.sock \
  centurylink/dockerfile-from-image ubuntu:django > Dockerfile

DATABASES = {                                                                                                                          
    'default': {                                                                                                                          
        'ENGINE':   'django.db.backends.mysql',                                                                                           
        'NAME':     'mysite',                                                                                                         
        'USER':     'mysite',                                                                                                               
        'PASSWORD': 'XXXXXXXXXXXXXXXXXXXXXXXX@123',                                                                                                               
        'HOST':     'mysql-mysite-product.marathon.mesos',                                                                                                         
        'PORT':     XXXXXXXXXXXX,                                                                                                                 
    }                                                                                                                                     
}

docker run -i -t \
    -e MYSQL_DATABASE="mysite" \
    -e MYSQL_USER="mysite" \
    -e MYSQL_PASSWORD="XXXXXXXXXXXX@XXXXXXXXXXXX" \
    -e=MYSQL_HOST="XXXXXXXXXXXX" \
    -e MYSQL_PORT="XXXXXXXXXXXX" \
    ubuntu:djangosave /bin/sh -c 'cd /opt/mysite/mysite && ./upsetting.sh && cd /opt/mysite && python manage.py runserver 0.0.0.0:8888'

cat >> /opt/mysite/mysite/settings.py <<EOF
DATABASES = {
    "default": {
        "ENGINE":   "django.db.backends.mysql",
        "NAME":     "${MYSQL_DATABASE}",
        "USER":     "${MYSQL_USER}",
        "PASSWORD": "${MYSQL_PASSWORD}",
        "HOST":     "${MYSQL_HOST}",
        "PORT":     ${MYSQL_PORT},
    }
}
EOF

docker run -i -t \
    -e MYSQL_DATABASE="mysite" \
    -e MYSQL_USER="mysite" \
    -e MYSQL_PASSWORD="XXXXXXXXXXXXXXXXXXXXXXXX@123" \
    -e=MYSQL_HOST="XXXXXXXXXXXX" \
    -e MYSQL_PORT="XXXXXXXXXXXX" \
    ubuntu:djangosave /bin/sh -c 'cd /opt/mysite/uwsgi && uwsgi uwsgi.ini && service nginx start'


docker run --name=product-envname-django -d -it -p 80:80 -p 443:443 \
    -e MYSQL_DATABASE="mysite" \
    -e MYSQL_USER="mysite" \
    -e MYSQL_PASSWORD="XXXXXXXXXXXXXXXXXXXXXXXX" \
    -e MYSQL_HOST="XXXXXXXXXXXX" \
    -e MYSQL_PORT="31111" \
    -v /opt/DJANGO-DEMO/files/sharedfiles:/opt/DJANGO-DEMO/applications/mysite/template/sharedfiles \
    -v /opt/DJANGO-DEMO/logs:/opt/DJANGO-DEMO/applications/mysite/logs \
    nsc/django:1.0.0.1

docker run --name=product-envname-mysql -d -it -p 31111:3306 \
    -e MYSQL_DATABASE="mysite" \
    -e MYSQL_ROOT_PASSWORD="XXXXXXXXXXXX" \
    -e MYSQL_USER="mysite" \
    -e MYSQL_PASSWORD="XXXXXXXXXXXX" \
    mysql:5.6

https://docs.docker.com/machine/install-machine/
http://www.open-open.com/lib/view/open1428540315869.html
http://www.jdon.com/46901



add-apt-repository ppa:gluster/glusterfs-3.5
apt-get install glusterfs-server -y
mkdir -p /opt/fileserver
gluster volume create fileserver 10.20.0.188:/opt/fileserver/ force
gluster volume start fileserver
gluster volume info fileserver

add-apt-repository ppa:gluster/glusterfs-3.5
apt-get install glusterfs-client -y
mkdir -p /opt/fileserver
mount -t glusterfs 10.20.0.188:fileserver /opt/fileserver

mkdir -p /opt/fileserver/product-envname-django/logs
mkdir -p /opt/fileserver/product-envname-django/files/sharedfiles

docker run --name=product-envname-django -d -it -p 80:80 -p 443:443 \
    -e MYSQL_DATABASE="mysite" \
    -e MYSQL_USER="mysite" \
    -e MYSQL_PASSWORD="XXXXXXXXXXXX" \
    -e MYSQL_HOST="XXXXXXXXXXXX" \
    -e MYSQL_PORT="31111" \
    -v /opt/fileserver/product-envname-django/files/sharedfiles:/opt/DJANGO-DEMO/applications/mysite/template/sharedfiles \
    -v /opt/fileserver/product-envname-django/logs:/opt/DJANGO-DEMO/applications/mysite/logs \
    nsc/django:1.0.0.1


